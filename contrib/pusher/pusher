#!/usr/bin/env escript
%% -*- erlang -*-
%% -detached -smp enable -name pusher -mnesia debug verbose

-module(stream_pusher).
-export([run_loop/1]).

-define(TIMEOUT, 5000).
-define(COUNTER, 100).
%-define(D(X), {YYYY, MM, DD} = date(), {HH, Min, SS} = time(), io:format("[~p/~p/~p ~p:~p:~p] DEBUG:~p ~p~n",[YYYY, MM, DD, HH, Min, SS, ?LINE, X])).
-define(D(X), io:format("DEBUG:~p ~p~n",[?LINE, X])).

-record(pusher, {
  name = "noname",
  from_url,
  to_url,
  from_counter = 0,
  to_counter = 0,
  from = undefined,
  to = undefined
}).

-record(pid_context, {
  name = "noname",
  from_url,
  to_url,
  reference = undefined,
  pid = undefined
}).

main (["test"|_Args]) ->
  ?D(test),  
%
ok;

main ([ConfFile]) ->
  case file:path_consult(["."], ConfFile) of
    {ok, Tonnels, Path} ->
      io:format("Loading config from file ~s~n", [Path]),
      [spawn(fun() ->
                manage_pusher_thread({Name, FromUrl, ToUrl})
             end) || {Name, {FromUrl, ToUrl}} <- Tonnels],
      ok;
    {error, enoent} -> ok
  end,
  run_logger();

main([Name, FromUrl, ToUrl]) ->
  run_loop(#pusher{name = Name, from_url = FromUrl, to_url = ToUrl});

main([FromUrl, ToUrl]) ->
  run_loop(#pusher{from_url = FromUrl, to_url = ToUrl});

main([]) ->
  main(['pusher.conf']).

manage_pusher_thread({Name, FromUrl, ToUrl}) ->
  Pid = start_pusher_thread({Name, FromUrl, ToUrl}),
  Reference = erlang:monitor(process, Pid),
  receive
    {'DOWN',Reference,process,Pid,Reason} ->
      ?D({[Name],"Process is down", Reason}),
      timer:sleep(1000),
      ?D({[Name],  "Restarting..."}),
      manage_pusher_thread({Name, FromUrl, ToUrl})
  end.

start_pusher_thread({Name, FromUrl, ToUrl}) ->
  spawn(fun() ->
    run_pusher(Name, FromUrl, ToUrl)
  end).

run_pusher (Name, FromUrl, ToUrl) ->
  try
    run_loop(#pusher{name = Name, from_url = FromUrl, to_url = ToUrl})
  catch
    Any -> ?D({[Name], "Process is down", Any}),
      ?D( {"Restarting", Name}),
      %timer:sleep(5000),
      run_pusher (Name, FromUrl, ToUrl)
  end.



connect_source({From, Name}) ->
  {_, _, Host, Port, Path, Query} = http_uri:parse(From),
  case gen_tcp:connect(Host, Port, [binary, {packet, http_bin}, {active, false}], 1000) of
    {ok, Socket} ->
      ?D({[Name],"Connecting to", From}),
      gen_tcp:send(Socket, "GET "++Path++"?"++Query++" HTTP/1.1\r\nHost: "++Host++"\r\n\r\n"),
      read_response(Socket, {From, Name});
    {error, econnrefused} ->
      ?D({[Name],"Cannot connect source", From}),
      timer:sleep(1000),
      connect_source({From, Name})
  end;

connect_source(From) ->
  connect_source({From, unnamed}).

read_response(Socket, {From, Name}) ->
  inet:setopts(Socket, [{active, once}]),
  receive
    {http, Socket, {http_response, _Version, 200, _Reply}} ->
      read_headers(Socket, {From, Name});
    {tcp_closed, _} ->
      ?D({[Name],"Socket closed", From}),
      timer:sleep(1000),
      connect_source({From, Name});
    Else -> ?D({[Name],"Not matched value", Else}),
      throw ({[Name], {unmatched_value, Else}, {from, From}})
  after
    ?TIMEOUT ->
      ?D({[Name],"Timeout reading http response"}),
      throw ({[Name], "Timeout reading http response", {from, From}})
  end;

read_response(Socket, From) ->
        read_response(Socket, {From, unanmed}).

read_headers(Socket, {From, Name}) ->
  inet:setopts(Socket, [{active, once}]),
  receive
    {http, Socket, {http_header, _, _Header, _, _Value}} ->
      read_headers(Socket, {From, Name});
    {http, Socket, http_eoh} ->
      inet:setopts(Socket, [{packet, raw}]),
      ?D({[Name],"Connecting to source"}),
      Socket;
    {tcp_closed, _} ->
      ?D({[Name],"Socket closed", From}),
      timer:sleep(1000),
      connect_source({From, Name})
  after
    ?TIMEOUT ->
      ?D({[Name],"Timeout reading http headers"}),
      false
  end;

read_headers(Socket, From) ->
  read_headers(Socket, {From, unnamed}).




connect_to({To, Name}) ->
  {_, _, Host, Port, Path, Query} = http_uri:parse(To),
  case gen_tcp:connect(Host, Port, [binary, {packet, http_bin}, {active, false}], 1000) of
    {ok, Socket} ->
      gen_tcp:send(Socket, "PUT "++Path++"?"++Query++" HTTP/1.1\r\nHost: "++Host++"\r\n\r\n"),
      ?D({[Name],"Connected to destination"}),
      Socket;
    {error, econnrefused} ->
      ?D({[Name],"Destination is down", To}),
      timer:sleep(1000),
      connect_to({To, Name})
  end;

connect_to(To) ->
  connect_to({To, unnamed}).


run_loop(#pusher{from_counter = ?COUNTER, from_url = URL}) ->
  ?D({"Too many connections to ", URL}),
  ok;

run_loop(#pusher{to_counter = ?COUNTER, to_url = URL}) ->
  ?D({"Too many connections to ", URL}),
  ok;

run_loop(#pusher{from = false, from_counter = Counter} = Pusher) ->
  run_loop(Pusher#pusher{from = undefined, from_counter = Counter + 1});

run_loop(#pusher{to = false, to_counter = Counter} = Pusher) ->
  run_loop(Pusher#pusher{to = undefined, to_counter = Counter + 1});

run_loop(#pusher{name = Name, from = undefined, from_url = URL} = Pusher) ->
  run_loop(Pusher#pusher{from = connect_source({URL, Name})});

run_loop(#pusher{name = Name, to = undefined, to_url = URL} = Pusher) ->
  run_loop(Pusher#pusher{to = connect_to({URL, Name})});

run_loop(#pusher{from = ok} = Pusher) ->
  ?D({"Strange from value", Pusher}),
  run_loop(Pusher#pusher{to = undefined, from = undefined});

run_loop(#pusher{name=Name, from = From, to = To} = Pusher) ->
  inet:setopts(From, [{active, once}]),
  receive
    {tcp, From, Bin} ->
      gen_tcp:send(To, Bin),
      run_loop(Pusher);
    {tcp_closed, From} ->
      run_loop(Pusher#pusher{from = undefined});
    {tcp_closed, To} ->
      run_loop(Pusher#pusher{to = undefined});
    Else ->
      ?D({[Name],"Undefined message", Else}),
      run_loop(Pusher)
  after
    ?TIMEOUT ->
      ?D({[Name],"Timeout in pusher"}),
      exit("Timeout in pusher")
  end.

run_logger() ->
  receive
    {Name, msg} -> io:format("Yesss"), ?D({Name, msg});
    _Other -> ?D({"Unknown", _Other})
  end,
  run_logger().
