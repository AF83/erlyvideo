#!/usr/bin/env ruby


class Repository
  Version = Struct.new(:name, :version, :repository, :urgency, :log, :author_and_time)
  
  attr_reader :path
  
  def repo_path
    "/apps/erlyvideo/debian/public"
  end
  
  def initialize(path)
    @path = path
  end
  
  def last_version
    tag = `(cd #{path}; git tag -n1 -l| sort -V | tail -1)`.strip
    tag =~ /v([^\ ]+) [\ ]*(.*)/
    [$1, $2]
  end
  
  def version
    @version ||= last_version.first
  end
  
  def changes
    version, log = last_version
    if changelog.find {|ver| ver.version == version}
      return
    end
<<-EOF
#{name} (#{version}) #{repository}; urgency=#{urgency}

#{log.split("\n").map{|line| "  " + line}.join("\n")}

 -- #{tagger_and_time(version)}

EOF
  end
  
  def tagger_and_time(version)
    output = `(cd #{path}; git tag -v v#{version} 2>/dev/null)`.split("\n").grep(/tagger /).first
    
    if output =~ /tagger (.+) (\d+) ([\+\-][\d]+)/
      "#{$1}  #{Time.at($2.to_i).strftime("%a, %d %b %Y %H:%M:%S")} #{$3}"
    else
      raise "Error with tag #{version}: #{output}"
    end
  end
  
  def name
    @name ||= changelog.first.name
  end
  
  def repository
    changelog.first.repository
  end
  
  def urgency
    changelog.first.urgency
  end
    
  
  def changelog
    @changelog ||= load_changelog
  end
  
  def changelog_path
    "#{path}/debian/changelog"
  end
  
  def load_changelog
    entries = []
    File.open(changelog_path) do |f|
      lines = f.readlines
      
      while !lines.empty?
        first_line = lines.shift
        raise "Invalid changelog: #{first_line}" unless first_line =~ /(.+) \(([^\)]+)\) ([^;]+); urgency=(\w+)/
        name, version, repository, urgency  = $1, $2, $3, $4
        lines.shift
        log = []
        while (s = lines.shift) =~ /  (.+)/
          log << "#{s.strip}"
        end
        last_line =  lines.shift
        raise "Invalid line log: #{last_line}" unless last_line =~ / \-\- (.+)/
        author_and_time = $1
        time = $4
        ver = Version.new(name,version,repository,urgency,log,author_and_time)
        lines.shift
        entries << ver
      end
    end
    entries
  end
  
  def prepend_changelog
    if changes
      changelog = File.read(changelog_path)
      File.open(changelog_path, "w+") do |f|
        f << changes
        f << changelog
      end
      true
    else
      false
    end
  end
  
  def commit_debian
    `(cd #{path}; git checkout master; git pull; git add debian; git commit -m 'debian #{version}'; git push; git push --tags)`
  end
  
  def build_debian
    `(cd #{path}; debuild -us -uc)`
  end
  
  def upload_launchpad
    `dput erly #{path}/../#{name}_#{version}_source.changes` if File.exists?(File.expand_path("~/.dput.cf"))
  end
  
  def upload_erlyvideo
    return unless File.exists?(repo_path)
    Dir["#{path}/../#{name}_#{version}_*.deb"].each do |deb|
      FileUtils.cp(deb, "#{repo_path}/binary/")
    end
    Dir["#{path}/../#{name}_#{version}.*"].each do |deb|
      FileUtils.cp(deb, "#{repo_path}/source/")
    end
    `(cd #{repo_path}/..; ./update)`
  end
  
  def cleanup
    Dir["#{path}/../#{name}_#{version}*"] {|file| File.unlink(file)}
  end
  
  def debianize
    new_version = false
    if prepend_changelog
      commit_debian
      new_version = true
    end
    build_debian
    upload_launchpad if new_version
    upload_erlyvideo
    cleanup
  end
  
  def self.debianize_all
    root = File.dirname(__FIlE__)+"/../"
    deps = %w(amf erlmedia erlydtl ertp ertsp log4erl mpegts rtmp shoutcast)
    ([root] + deps.map {|dep| "#{root}/deps/#{dep}"}).each do |repo|
      Repository.new(repo).debianize
    end
  end
end

repo = Repository.new(ARGV[0])
repo.send(ARGV[1] ? ARGV[1].to_sym : :debianize)

