#!/bin/sh
#
### BEGIN INIT INFO
# Provides:          erlyvideo
# Required-Start:    $network
# Required-Stop:     $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start erlyvideo at boot time and control it in runtime
# Description:       Enable service provided by erlyvideo.
### END INIT INFO
  
  

NODE=ems
HOST=localhost

# Define ejabberd environment
ERL="erl +A 4 +K true"

start()
{
  export ERL_LIBS=deps:lib:plugins:..
  EBIN=`erl -eval 'io:format("~s", [code:lib_dir(erlyvideo,ebin)])' -s init stop -noshell`
	$ERL -noinput -detached -pa ebin -pa "$EBIN" \
	-sasl sasl_error_logger 'false' \
  -kernel error_logger 'false' \
	-sasl error_logger_mf_dir '"log/report"' \
	-sasl error_logger_mf_maxbytes '100000' \
	-sasl error_logger_mf_maxfiles '255' \
	-sasl utc_log 'true' \
	-boot start_sasl \
	-s erlyvideo \
	-sname $NODE@$HOST
}

run()
{
	ERL_LIBS=deps:lib:plugins:.. $ERL -pa ebin \
  -sasl errlog_type 'all' \
	-boot start_sasl \
	-s erlyvideo \
	-sname $NODE@$HOST
	exit
}

shell()
{
    $ERL \
      -sname debug$NODE@$HOST \
      -pa ebin \
      -hidden \
      -remsh $NODE@$HOST
}

ctl()
{
    $ERL \
      -sname ctl$NODE@$HOST \
      -pa ebin \
      -noinput \
      -hidden \
      -s erlyvideo_ctl -extra $NODE@$HOST $@
}

usage()
{
    echo <<-EOF
erlyctl run (in foreground)
erlyctl start (in background)
erlyctl shell (remote shell)
erlyctl stop (shutdown server)
erlyctl reload (validate and reload config file)
erlyctl restart (reload config file and restart whole server)
EOF
    exit
}

stop()
{
  ctl stop
}

reload()
{
  ctl restart
}

restart()
{
  ctl restart
}

runas()
{
  if [ `id -u` != "0" ]; then
    $@
  else
    cd /var/lib/erlyvideo
    su - erlyvideo -s /bin/sh -c "/usr/bin/erlyctl $*"
  fi
}

[ $# -lt 1 ] && usage

runas $@

