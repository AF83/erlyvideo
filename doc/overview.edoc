@author Max Lapshin <max@maxidoors.ru>
@reference <a href="http://erlyvideo.org/">erlyvideo.org</a>

@doc 
<h2>Protocol description</h2>

RTMP stands for <a href="http://www.adobe.com/devnet/rtmp/pdf/rtmp_specification_1.0.pdf">Real Time Messaging Protocol</a>. It is a proprietary protocol from beloved Adobe, supported by Flash Player from one side and by Adobe Flash Media Server from other side. All other implementations use non-strictly implemented reverse engineered ideas about RTMP.

Flash client can access video (including live streams), audio, record from camera/microphone and perform method invocations via RTMP.

In the first paragraph I gave link to Adobe RTMP specification. Speaking officially, don't read it! Adobe allows to read that document with one very, very strict condition: You must implement protocol as it is described in specification. Sorry, but specification is incomplete and broken. Flash checks encrypted handshake to enable H264 decoder, so RTMP server, created by that specification, will not be able to read modern video files.

You are warned!

<h2>RTMP library</h2>

Started as core code of erlyvideo in early 2007, rtmp encoder/decoder part was extracted into library, ready to be used in other projects, for example for building rtmp client.

Now it is located in separate repository: http://github.com/erlyvideo/erlang-rtmp

It consists of following parts:
<ul>
<li><b>{@link rtmp. rtmp}</b>: clear functional encoder/decoder part, that doesn't modify anything behind scene. This part can be easily tested.;</li>
<li><b>{@link rtmp_socket. rtmp_socket}</b>: statefull proxy object, that wraps TCP socket and complicated state inside itself. It sends messages to consumer, just like HTTP mode of socket in erlang. Consumer must use the same message based protocol to send data to this object;</li>
<li><b>{@link rtmp_lib. rtmp_lib}</b>: library with several base functions.</li>
<li><b>{@link rtmpt. rtmpt}</b>: RTMPT handler.</li>
</ul>

You can already use it to implement clients. Take a look at contrib/rtmp_bench example, which requires library erlang-amf from http://github.com/erlyvideo/erlang-amf

<h2>Server usage</h2>

<pre><code>
application:start(rtmp),
rtmp_socket:start_server(1935, rtmp_listener1, rtmp_session),
</code></pre>

rtmp_listener1 is just a name, used to identify this instance of listener. There maybe many of them.
rtmp_session is you module, that must implement following method:
<pre><code>
-export([create_client/1]).

create_client(RTMPSocket) ->  %% Here RTMPSocket is pid() of rtmp socket, not TCP port()
	%% here you must create consumer for messages and init it with rtmp socket
  {ok, Pid} = ems_sup:start_rtmp_session(RTMPSocket), 
  {ok, Pid}.
</code></pre>

@end